package principle;

/**
 * @version ：V1.0
 * @description: 里氏替换原则 Liskov Substitution Principle
 * @author: zhj
 * @create: 2020-04-16 13:40
 */
public class LSP {

    /**
     * 里氏替换原则:
     *
     * 所有使用基类的地方，必须能透明的使用其子类
     *
     * 简单来说就是定义了什么是父子。在现实生活中，什么是父子？
     * 就是生你的那个男人和你的关系就是父子（父女）。
     * 而这里定义的就是假如 A 能胜任 B 干的所有事情，那 B 就是 A 的父亲，也就是儿子要会父亲的所有能活，儿子活得再烂也要有父亲的水平。
     *
     *  里氏替换原则定义了什么是父子，还有一点要注意的，就是儿子不能在父亲会的技能上搞“创新”。
     *
     *
     *  优点
     *
     * 代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；
     * 提高代码的重用性；
     * 子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同；
     * 提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的；
     * 提高产品或项目的开放性。
     *
     *
     * 缺点
     *
     * 继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法；
     * 降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；
     * 增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果————大段的代码需要重构。
     */
}